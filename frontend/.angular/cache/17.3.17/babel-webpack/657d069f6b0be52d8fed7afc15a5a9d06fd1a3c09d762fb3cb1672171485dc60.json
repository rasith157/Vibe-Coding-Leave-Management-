{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let AuditLoggerService = /*#__PURE__*/(() => {\n  class AuditLoggerService {\n    constructor() {\n      this.sessionId = this.generateSessionId();\n      this.logInfo('SYSTEM', 'Audit Logger Service Initialized', {\n        sessionId: this.sessionId\n      });\n    }\n    generateSessionId() {\n      return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    setUserId(userId) {\n      this.userId = userId;\n      this.logInfo('AUTH', 'User ID Set', {\n        userId\n      });\n    }\n    clearUserId() {\n      this.logInfo('AUTH', 'User ID Cleared', {\n        previousUserId: this.userId\n      });\n      this.userId = undefined;\n    }\n    createLog(level, category, action, details) {\n      return {\n        timestamp: new Date().toISOString(),\n        level,\n        category,\n        action,\n        details,\n        userId: this.userId,\n        sessionId: this.sessionId\n      };\n    }\n    writeLog(log) {\n      const logMessage = `[${log.timestamp}] [${log.level}] [${log.category}] ${log.action}`;\n      const logData = {\n        ...log,\n        details: log.details ? JSON.stringify(log.details, null, 2) : undefined\n      };\n      switch (log.level) {\n        case 'ERROR':\n          console.error(logMessage, logData);\n          break;\n        case 'WARN':\n          console.warn(logMessage, logData);\n          break;\n        case 'DEBUG':\n          console.debug(logMessage, logData);\n          break;\n        default:\n          console.log(logMessage, logData);\n      }\n      // In production, you could send logs to a remote logging service here\n      this.sendToRemoteLogger(log);\n    }\n    sendToRemoteLogger(log) {\n      // Placeholder for remote logging service integration\n      // Example: send to Splunk, ELK stack, or cloud logging service\n      if (this.isProduction()) {\n        // Implementation would go here\n        console.debug('Log would be sent to remote service:', log);\n      }\n    }\n    isProduction() {\n      return window.location.hostname !== 'localhost';\n    }\n    // Public logging methods\n    logInfo(category, action, details) {\n      this.writeLog(this.createLog('INFO', category, action, details));\n    }\n    logWarn(category, action, details) {\n      this.writeLog(this.createLog('WARN', category, action, details));\n    }\n    logSimpleError(category, action, details) {\n      this.writeLog(this.createLog('ERROR', category, action, details));\n    }\n    logDebug(category, action, details) {\n      this.writeLog(this.createLog('DEBUG', category, action, details));\n    }\n    // Specific audit methods for common actions\n    logAuthAttempt(email, success, errorMessage) {\n      this.logInfo('AUTH', 'Login Attempt', {\n        email: this.maskEmail(email),\n        success,\n        errorMessage,\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString()\n      });\n    }\n    logRegistrationAttempt(userData, success, errorMessage) {\n      this.logInfo('AUTH', 'Registration Attempt', {\n        email: this.maskEmail(userData.email),\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        success,\n        errorMessage,\n        userAgent: navigator.userAgent\n      });\n    }\n    logFormSubmission(formName, formData, isValid) {\n      this.logInfo('FORM', 'Form Submission', {\n        formName,\n        isValid,\n        fieldCount: Object.keys(formData).length,\n        fields: Object.keys(formData),\n        hasErrors: !isValid\n      });\n    }\n    logFormValidation(formName, fieldName, isValid, errorMessage) {\n      this.logDebug('FORM', 'Field Validation', {\n        formName,\n        fieldName,\n        isValid,\n        errorMessage\n      });\n    }\n    logNavigation(from, to) {\n      this.logInfo('NAVIGATION', 'Page Navigation', {\n        from,\n        to,\n        timestamp: new Date().toISOString()\n      });\n    }\n    logUserAction(action, component, details) {\n      this.logInfo('USER_ACTION', action, {\n        component,\n        ...details\n      });\n    }\n    logApiCall(method, url, statusCode, responseTime, error) {\n      const level = error ? 'ERROR' : statusCode && statusCode >= 400 ? 'WARN' : 'INFO';\n      this.writeLog(this.createLog(level, 'API', `${method} ${url}`, {\n        statusCode,\n        responseTime,\n        error: error ? error.message : undefined\n      }));\n    }\n    logComponentLifecycle(component, lifecycle, details) {\n      this.logDebug('SYSTEM', `Component ${lifecycle}`, {\n        component,\n        ...details\n      });\n    }\n    logError(category, action, error, context) {\n      this.writeLog(this.createLog('ERROR', category, action, {\n        error: {\n          message: error?.message,\n          stack: error?.stack,\n          name: error?.name\n        },\n        context\n      }));\n    }\n    // Utility methods\n    maskEmail(email) {\n      if (!email) return '';\n      const [local, domain] = email.split('@');\n      if (!domain) return email;\n      const maskedLocal = local.length > 2 ? local.substring(0, 2) + '*'.repeat(local.length - 2) : local;\n      return `${maskedLocal}@${domain}`;\n    }\n    // Method to export logs (for debugging or admin purposes)\n    exportLogs() {\n      this.logInfo('SYSTEM', 'Logs Export Requested', {\n        sessionId: this.sessionId,\n        userId: this.userId\n      });\n    }\n    // Method to clear session (on logout)\n    clearSession() {\n      this.logInfo('AUTH', 'Session Cleared', {\n        sessionId: this.sessionId,\n        userId: this.userId\n      });\n      this.sessionId = this.generateSessionId();\n      this.userId = undefined;\n    }\n    static {\n      this.ɵfac = function AuditLoggerService_Factory(t) {\n        return new (t || AuditLoggerService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuditLoggerService,\n        factory: AuditLoggerService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuditLoggerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}