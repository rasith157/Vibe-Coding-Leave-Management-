{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/audit-logger.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(apiService, router, auditLogger) {\n      this.apiService = apiService;\n      this.router = router;\n      this.auditLogger = auditLogger;\n    }\n    canActivate(route, state) {\n      const isAuthenticated = this.apiService.isAuthenticated();\n      const currentUser = this.apiService.getCurrentUser();\n      const requestedUrl = state.url;\n      this.auditLogger.logInfo('NAVIGATION', 'Route Access Attempt', {\n        requestedUrl,\n        isAuthenticated,\n        userRole: currentUser?.role || 'anonymous',\n        timestamp: new Date().toISOString()\n      });\n      if (!isAuthenticated) {\n        this.auditLogger.logWarn('AUTH', 'Unauthorized Access Attempt', {\n          requestedUrl,\n          redirectTo: '/login'\n        });\n        // Redirect to login page with return url\n        this.router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: requestedUrl\n          }\n        });\n        return false;\n      }\n      // Check role-based access for admin routes\n      if (requestedUrl.startsWith('/admin')) {\n        if (currentUser?.role !== 'ADMIN') {\n          this.auditLogger.logWarn('AUTH', 'Admin Access Denied', {\n            requestedUrl,\n            userRole: currentUser?.role,\n            userId: currentUser?.id,\n            redirectTo: '/dashboard'\n          });\n          // Redirect non-admin users to dashboard\n          this.router.navigate(['/dashboard']);\n          return false;\n        }\n      }\n      this.auditLogger.logInfo('NAVIGATION', 'Route Access Granted', {\n        requestedUrl,\n        userRole: currentUser?.role,\n        userId: currentUser?.id\n      });\n      return true;\n    }\n    static {\n      this.ɵfac = function AuthGuard_Factory(t) {\n        return new (t || AuthGuard)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuditLoggerService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthGuard,\n        factory: AuthGuard.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}