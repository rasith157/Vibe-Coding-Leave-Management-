{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuditLoggerService {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.logInfo('SYSTEM', 'Audit Logger Service Initialized', {\n      sessionId: this.sessionId\n    });\n  }\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  setUserId(userId) {\n    this.userId = userId;\n    this.logInfo('AUTH', 'User ID Set', {\n      userId\n    });\n  }\n  clearUserId() {\n    this.logInfo('AUTH', 'User ID Cleared', {\n      previousUserId: this.userId\n    });\n    this.userId = undefined;\n  }\n  createLog(level, category, action, details) {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      action,\n      details,\n      userId: this.userId,\n      sessionId: this.sessionId\n    };\n  }\n  writeLog(log) {\n    const logMessage = `[${log.timestamp}] [${log.level}] [${log.category}] ${log.action}`;\n    const logData = {\n      ...log,\n      details: log.details ? JSON.stringify(log.details, null, 2) : undefined\n    };\n    switch (log.level) {\n      case 'ERROR':\n        console.error(logMessage, logData);\n        break;\n      case 'WARN':\n        console.warn(logMessage, logData);\n        break;\n      case 'DEBUG':\n        console.debug(logMessage, logData);\n        break;\n      default:\n        console.log(logMessage, logData);\n    }\n    // In production, you could send logs to a remote logging service here\n    this.sendToRemoteLogger(log);\n  }\n  sendToRemoteLogger(log) {\n    // Placeholder for remote logging service integration\n    // Example: send to Splunk, ELK stack, or cloud logging service\n    if (this.isProduction()) {\n      // Implementation would go here\n      console.debug('Log would be sent to remote service:', log);\n    }\n  }\n  isProduction() {\n    return window.location.hostname !== 'localhost';\n  }\n  // Public logging methods\n  logInfo(category, action, details) {\n    this.writeLog(this.createLog('INFO', category, action, details));\n  }\n  logWarn(category, action, details) {\n    this.writeLog(this.createLog('WARN', category, action, details));\n  }\n  logSimpleError(category, action, details) {\n    this.writeLog(this.createLog('ERROR', category, action, details));\n  }\n  logDebug(category, action, details) {\n    this.writeLog(this.createLog('DEBUG', category, action, details));\n  }\n  // Specific audit methods for common actions\n  logAuthAttempt(email, success, errorMessage) {\n    this.logInfo('AUTH', 'Login Attempt', {\n      email: this.maskEmail(email),\n      success,\n      errorMessage,\n      userAgent: navigator.userAgent,\n      timestamp: new Date().toISOString()\n    });\n  }\n  logRegistrationAttempt(userData, success, errorMessage) {\n    this.logInfo('AUTH', 'Registration Attempt', {\n      email: this.maskEmail(userData.email),\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      success,\n      errorMessage,\n      userAgent: navigator.userAgent\n    });\n  }\n  logFormSubmission(formName, formData, isValid) {\n    this.logInfo('FORM', 'Form Submission', {\n      formName,\n      isValid,\n      fieldCount: Object.keys(formData).length,\n      fields: Object.keys(formData),\n      hasErrors: !isValid\n    });\n  }\n  logFormValidation(formName, fieldName, isValid, errorMessage) {\n    this.logDebug('FORM', 'Field Validation', {\n      formName,\n      fieldName,\n      isValid,\n      errorMessage\n    });\n  }\n  logNavigation(from, to) {\n    this.logInfo('NAVIGATION', 'Page Navigation', {\n      from,\n      to,\n      timestamp: new Date().toISOString()\n    });\n  }\n  logUserAction(action, component, details) {\n    this.logInfo('USER_ACTION', action, {\n      component,\n      ...details\n    });\n  }\n  logApiCall(method, url, statusCode, responseTime, error) {\n    const level = error ? 'ERROR' : statusCode && statusCode >= 400 ? 'WARN' : 'INFO';\n    this.writeLog(this.createLog(level, 'API', `${method} ${url}`, {\n      statusCode,\n      responseTime,\n      error: error ? error.message : undefined\n    }));\n  }\n  logComponentLifecycle(component, lifecycle, details) {\n    this.logDebug('SYSTEM', `Component ${lifecycle}`, {\n      component,\n      ...details\n    });\n  }\n  logError(category, action, error, context) {\n    this.writeLog(this.createLog('ERROR', category, action, {\n      error: {\n        message: error?.message,\n        stack: error?.stack,\n        name: error?.name\n      },\n      context\n    }));\n  }\n  // Utility methods\n  maskEmail(email) {\n    if (!email) return '';\n    const [local, domain] = email.split('@');\n    if (!domain) return email;\n    const maskedLocal = local.length > 2 ? local.substring(0, 2) + '*'.repeat(local.length - 2) : local;\n    return `${maskedLocal}@${domain}`;\n  }\n  // Method to export logs (for debugging or admin purposes)\n  exportLogs() {\n    this.logInfo('SYSTEM', 'Logs Export Requested', {\n      sessionId: this.sessionId,\n      userId: this.userId\n    });\n  }\n  // Method to clear session (on logout)\n  clearSession() {\n    this.logInfo('AUTH', 'Session Cleared', {\n      sessionId: this.sessionId,\n      userId: this.userId\n    });\n    this.sessionId = this.generateSessionId();\n    this.userId = undefined;\n  }\n  static {\n    this.ɵfac = function AuditLoggerService_Factory(t) {\n      return new (t || AuditLoggerService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuditLoggerService,\n      factory: AuditLoggerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuditLoggerService","constructor","sessionId","generateSessionId","logInfo","Date","now","Math","random","toString","substr","setUserId","userId","clearUserId","previousUserId","undefined","createLog","level","category","action","details","timestamp","toISOString","writeLog","log","logMessage","logData","JSON","stringify","console","error","warn","debug","sendToRemoteLogger","isProduction","window","location","hostname","logWarn","logSimpleError","logDebug","logAuthAttempt","email","success","errorMessage","maskEmail","userAgent","navigator","logRegistrationAttempt","userData","firstName","lastName","logFormSubmission","formName","formData","isValid","fieldCount","Object","keys","length","fields","hasErrors","logFormValidation","fieldName","logNavigation","from","to","logUserAction","component","logApiCall","method","url","statusCode","responseTime","message","logComponentLifecycle","lifecycle","logError","context","stack","name","local","domain","split","maskedLocal","substring","repeat","exportLogs","clearSession","factory","ɵfac","providedIn"],"sources":["C:\\Leave management 2\\frontend\\src\\app\\services\\audit-logger.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nexport interface AuditLog {\r\n  timestamp: string;\r\n  level: 'INFO' | 'WARN' | 'ERROR' | 'DEBUG';\r\n  category: 'AUTH' | 'FORM' | 'NAVIGATION' | 'API' | 'USER_ACTION' | 'SYSTEM';\r\n  action: string;\r\n  details?: any;\r\n  userId?: string;\r\n  sessionId?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuditLoggerService {\r\n  private sessionId: string;\r\n  private userId?: string;\r\n\r\n  constructor() {\r\n    this.sessionId = this.generateSessionId();\r\n    this.logInfo('SYSTEM', 'Audit Logger Service Initialized', { sessionId: this.sessionId });\r\n  }\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  setUserId(userId: string) {\r\n    this.userId = userId;\r\n    this.logInfo('AUTH', 'User ID Set', { userId });\r\n  }\r\n\r\n  clearUserId() {\r\n    this.logInfo('AUTH', 'User ID Cleared', { previousUserId: this.userId });\r\n    this.userId = undefined;\r\n  }\r\n\r\n  private createLog(level: AuditLog['level'], category: AuditLog['category'], action: string, details?: any): AuditLog {\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category,\r\n      action,\r\n      details,\r\n      userId: this.userId,\r\n      sessionId: this.sessionId\r\n    };\r\n  }\r\n\r\n  private writeLog(log: AuditLog) {\r\n    const logMessage = `[${log.timestamp}] [${log.level}] [${log.category}] ${log.action}`;\r\n    const logData = {\r\n      ...log,\r\n      details: log.details ? JSON.stringify(log.details, null, 2) : undefined\r\n    };\r\n\r\n    switch (log.level) {\r\n      case 'ERROR':\r\n        console.error(logMessage, logData);\r\n        break;\r\n      case 'WARN':\r\n        console.warn(logMessage, logData);\r\n        break;\r\n      case 'DEBUG':\r\n        console.debug(logMessage, logData);\r\n        break;\r\n      default:\r\n        console.log(logMessage, logData);\r\n    }\r\n\r\n    // In production, you could send logs to a remote logging service here\r\n    this.sendToRemoteLogger(log);\r\n  }\r\n\r\n  private sendToRemoteLogger(log: AuditLog) {\r\n    // Placeholder for remote logging service integration\r\n    // Example: send to Splunk, ELK stack, or cloud logging service\r\n    if (this.isProduction()) {\r\n      // Implementation would go here\r\n      console.debug('Log would be sent to remote service:', log);\r\n    }\r\n  }\r\n\r\n  private isProduction(): boolean {\r\n    return window.location.hostname !== 'localhost';\r\n  }\r\n\r\n  // Public logging methods\r\n  logInfo(category: AuditLog['category'], action: string, details?: any) {\r\n    this.writeLog(this.createLog('INFO', category, action, details));\r\n  }\r\n\r\n  logWarn(category: AuditLog['category'], action: string, details?: any) {\r\n    this.writeLog(this.createLog('WARN', category, action, details));\r\n  }\r\n\r\n  logSimpleError(category: AuditLog['category'], action: string, details?: any) {\r\n    this.writeLog(this.createLog('ERROR', category, action, details));\r\n  }\r\n\r\n  logDebug(category: AuditLog['category'], action: string, details?: any) {\r\n    this.writeLog(this.createLog('DEBUG', category, action, details));\r\n  }\r\n\r\n  // Specific audit methods for common actions\r\n  logAuthAttempt(email: string, success: boolean, errorMessage?: string) {\r\n    this.logInfo('AUTH', 'Login Attempt', {\r\n      email: this.maskEmail(email),\r\n      success,\r\n      errorMessage,\r\n      userAgent: navigator.userAgent,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  logRegistrationAttempt(userData: any, success: boolean, errorMessage?: string) {\r\n    this.logInfo('AUTH', 'Registration Attempt', {\r\n      email: this.maskEmail(userData.email),\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      success,\r\n      errorMessage,\r\n      userAgent: navigator.userAgent\r\n    });\r\n  }\r\n\r\n  logFormSubmission(formName: string, formData: any, isValid: boolean) {\r\n    this.logInfo('FORM', 'Form Submission', {\r\n      formName,\r\n      isValid,\r\n      fieldCount: Object.keys(formData).length,\r\n      fields: Object.keys(formData),\r\n      hasErrors: !isValid\r\n    });\r\n  }\r\n\r\n  logFormValidation(formName: string, fieldName: string, isValid: boolean, errorMessage?: string) {\r\n    this.logDebug('FORM', 'Field Validation', {\r\n      formName,\r\n      fieldName,\r\n      isValid,\r\n      errorMessage\r\n    });\r\n  }\r\n\r\n  logNavigation(from: string, to: string) {\r\n    this.logInfo('NAVIGATION', 'Page Navigation', {\r\n      from,\r\n      to,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  logUserAction(action: string, component: string, details?: any) {\r\n    this.logInfo('USER_ACTION', action, {\r\n      component,\r\n      ...details\r\n    });\r\n  }\r\n\r\n  logApiCall(method: string, url: string, statusCode?: number, responseTime?: number, error?: any) {\r\n    const level = error ? 'ERROR' : statusCode && statusCode >= 400 ? 'WARN' : 'INFO';\r\n    this.writeLog(this.createLog(level, 'API', `${method} ${url}`, {\r\n      statusCode,\r\n      responseTime,\r\n      error: error ? error.message : undefined\r\n    }));\r\n  }\r\n\r\n  logComponentLifecycle(component: string, lifecycle: string, details?: any) {\r\n    this.logDebug('SYSTEM', `Component ${lifecycle}`, {\r\n      component,\r\n      ...details\r\n    });\r\n  }\r\n\r\n  logError(category: AuditLog['category'], action: string, error: any, context?: any) {\r\n    this.writeLog(this.createLog('ERROR', category, action, {\r\n      error: {\r\n        message: error?.message,\r\n        stack: error?.stack,\r\n        name: error?.name\r\n      },\r\n      context\r\n    }));\r\n  }\r\n\r\n  // Utility methods\r\n  private maskEmail(email: string): string {\r\n    if (!email) return '';\r\n    const [local, domain] = email.split('@');\r\n    if (!domain) return email;\r\n    const maskedLocal = local.length > 2 ? \r\n      local.substring(0, 2) + '*'.repeat(local.length - 2) : \r\n      local;\r\n    return `${maskedLocal}@${domain}`;\r\n  }\r\n\r\n  // Method to export logs (for debugging or admin purposes)\r\n  exportLogs(): void {\r\n    this.logInfo('SYSTEM', 'Logs Export Requested', {\r\n      sessionId: this.sessionId,\r\n      userId: this.userId\r\n    });\r\n  }\r\n\r\n  // Method to clear session (on logout)\r\n  clearSession(): void {\r\n    this.logInfo('AUTH', 'Session Cleared', {\r\n      sessionId: this.sessionId,\r\n      userId: this.userId\r\n    });\r\n    this.sessionId = this.generateSessionId();\r\n    this.userId = undefined;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}