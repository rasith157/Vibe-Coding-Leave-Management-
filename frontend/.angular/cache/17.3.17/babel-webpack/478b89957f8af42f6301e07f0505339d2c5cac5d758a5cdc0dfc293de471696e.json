{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./audit-logger.service\";\nexport class ApiService {\n  constructor(http, auditLogger) {\n    this.http = http;\n    this.auditLogger = auditLogger;\n    this.baseUrl = 'http://localhost:8080/api';\n    this.token = null;\n    // Load token from localStorage on service initialization\n    this.token = localStorage.getItem('auth_token');\n  }\n  // Get default headers with optional authentication\n  getHeaders() {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    if (this.token) {\n      headers = headers.set('Authorization', `Bearer ${this.token}`);\n    }\n    return headers;\n  }\n  // Handle HTTP errors and log them\n  handleError(error, url, method, startTime) {\n    const responseTime = Date.now() - startTime;\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Client Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server Error: ${error.status} - ${error.message}`;\n    }\n    // Log the API error\n    this.auditLogger.logApiCall(method, url, error.status, responseTime, error);\n    this.auditLogger.logError('API', `${method} ${url} Failed`, error, {\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n      responseTime\n    });\n    const apiError = {\n      message: errorMessage,\n      status: error.status || 0,\n      timestamp: new Date().toISOString(),\n      path: url\n    };\n    return throwError(() => apiError);\n  }\n  // Generic HTTP request method with logging\n  request(method, endpoint, body) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const startTime = Date.now();\n    this.auditLogger.logApiCall(method, url);\n    const httpOptions = {\n      headers: this.getHeaders()\n    };\n    let httpRequest;\n    switch (method.toUpperCase()) {\n      case 'GET':\n        httpRequest = this.http.get(url, httpOptions);\n        break;\n      case 'POST':\n        httpRequest = this.http.post(url, body, httpOptions);\n        break;\n      case 'PUT':\n        httpRequest = this.http.put(url, body, httpOptions);\n        break;\n      case 'DELETE':\n        httpRequest = this.http.delete(url, httpOptions);\n        break;\n      default:\n        return throwError(() => new Error(`Unsupported HTTP method: ${method}`));\n    }\n    return httpRequest.pipe(map(response => {\n      const responseTime = Date.now() - startTime;\n      // Log successful API call\n      this.auditLogger.logApiCall(method, url, 200, responseTime);\n      return {\n        success: true,\n        data: response,\n        message: 'Request successful'\n      };\n    }), catchError(error => this.handleError(error, url, method, startTime).pipe(map(apiError => ({\n      success: false,\n      error: apiError,\n      message: apiError.message\n    })))));\n  }\n  // Authentication Methods\n  /**\n   * Login user with email and password\n   */\n  login(credentials) {\n    this.auditLogger.logInfo('API', 'Login Request Started', {\n      email: credentials.email,\n      timestamp: new Date().toISOString()\n    });\n    return this.request('POST', '/auth/login', credentials).pipe(map(response => {\n      if (response.success && response.data) {\n        // Store token and user info\n        this.token = response.data.token;\n        localStorage.setItem('auth_token', this.token);\n        localStorage.setItem('user_info', JSON.stringify(response.data.user));\n        // Set user ID in audit logger\n        this.auditLogger.setUserId(response.data.user.id.toString());\n        this.auditLogger.logInfo('API', 'Login Successful', {\n          userId: response.data.user.id,\n          userRole: response.data.user.role,\n          message: response.data.message\n        });\n      } else {\n        this.auditLogger.logError('API', 'Login Failed', new Error(response.message || 'Unknown error'), {\n          email: credentials.email\n        });\n      }\n      return response;\n    }));\n  }\n  /**\n   * Register new user\n   */\n  register(userData) {\n    // Set default role if not provided\n    const requestData = {\n      ...userData,\n      role: userData.role || 'EMPLOYEE'\n    };\n    this.auditLogger.logInfo('API', 'Registration Request Started', {\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      role: requestData.role,\n      timestamp: new Date().toISOString()\n    });\n    return this.request('POST', '/auth/register', requestData).pipe(map(response => {\n      if (response.success && response.data) {\n        // Store token and user info\n        this.token = response.data.token;\n        localStorage.setItem('auth_token', this.token);\n        localStorage.setItem('user_info', JSON.stringify(response.data.user));\n        // Set user ID in audit logger\n        this.auditLogger.setUserId(response.data.user.id.toString());\n        this.auditLogger.logInfo('API', 'Registration Successful', {\n          userId: response.data.user.id,\n          userRole: response.data.user.role,\n          message: response.data.message\n        });\n      } else {\n        this.auditLogger.logError('API', 'Registration Failed', new Error(response.message || 'Unknown error'), {\n          email: userData.email\n        });\n      }\n      return response;\n    }));\n  }\n  /**\n   * Logout user\n   */\n  logout() {\n    this.auditLogger.logInfo('API', 'Logout Initiated', {\n      userId: this.getCurrentUserId(),\n      timestamp: new Date().toISOString()\n    });\n    // Clear stored data\n    this.token = null;\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_info');\n    // Clear audit logger session\n    this.auditLogger.clearSession();\n    this.auditLogger.logInfo('AUTH', 'User Logged Out', {\n      timestamp: new Date().toISOString()\n    });\n  }\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    return !!this.token;\n  }\n  /**\n   * Get current user information\n   */\n  getCurrentUser() {\n    const userInfo = localStorage.getItem('user_info');\n    return userInfo ? JSON.parse(userInfo) : null;\n  }\n  /**\n   * Get current user ID\n   */\n  getCurrentUserId() {\n    const user = this.getCurrentUser();\n    return user ? user.id.toString() : null;\n  }\n  /**\n   * Get current auth token\n   */\n  getToken() {\n    return this.token;\n  }\n  // Future API methods can be added here (leaves, users, etc.)\n  /**\n   * Health check endpoint\n   */\n  healthCheck() {\n    return this.request('GET', '/health');\n  }\n  /**\n   * Test connection to backend\n   */\n  testConnection() {\n    this.auditLogger.logInfo('API', 'Testing Backend Connection', {\n      baseUrl: this.baseUrl,\n      timestamp: new Date().toISOString()\n    });\n    return this.request('GET', '/auth/test').pipe(map(response => {\n      const isConnected = response.success;\n      this.auditLogger.logInfo('API', 'Connection Test Result', {\n        connected: isConnected,\n        message: response.message\n      });\n      return isConnected;\n    }), catchError(() => {\n      this.auditLogger.logWarn('API', 'Backend Connection Failed', {\n        baseUrl: this.baseUrl\n      });\n      return throwError(() => false);\n    }));\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuditLoggerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","map","catchError","ApiService","constructor","http","auditLogger","baseUrl","token","localStorage","getItem","getHeaders","headers","set","handleError","error","url","method","startTime","responseTime","Date","now","errorMessage","ErrorEvent","message","status","logApiCall","logError","statusText","apiError","timestamp","toISOString","path","request","endpoint","body","httpOptions","httpRequest","toUpperCase","get","post","put","delete","Error","pipe","response","success","data","login","credentials","logInfo","email","setItem","JSON","stringify","user","setUserId","id","toString","userId","userRole","role","register","userData","requestData","firstName","lastName","logout","getCurrentUserId","removeItem","clearSession","isAuthenticated","getCurrentUser","userInfo","parse","getToken","healthCheck","testConnection","isConnected","connected","logWarn","i0","ɵɵinject","i1","HttpClient","i2","AuditLoggerService","factory","ɵfac","providedIn"],"sources":["C:\\Leave management 2\\frontend\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  AuthResponse, \r\n  ApiResponse, \r\n  ApiError \r\n} from '../interfaces/auth.interface';\r\nimport { AuditLoggerService } from './audit-logger.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private readonly baseUrl = 'http://localhost:8080/api';\r\n  private token: string | null = null;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private auditLogger: AuditLoggerService\r\n  ) {\r\n    // Load token from localStorage on service initialization\r\n    this.token = localStorage.getItem('auth_token');\r\n  }\r\n\r\n  // Get default headers with optional authentication\r\n  private getHeaders(): HttpHeaders {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    if (this.token) {\r\n      headers = headers.set('Authorization', `Bearer ${this.token}`);\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  // Handle HTTP errors and log them\r\n  private handleError(error: HttpErrorResponse, url: string, method: string, startTime: number): Observable<never> {\r\n    const responseTime = Date.now() - startTime;\r\n    let errorMessage = 'An unknown error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Client Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Server Error: ${error.status} - ${error.message}`;\r\n    }\r\n\r\n    // Log the API error\r\n    this.auditLogger.logApiCall(method, url, error.status, responseTime, error);\r\n    this.auditLogger.logError('API', `${method} ${url} Failed`, error, {\r\n      status: error.status,\r\n      statusText: error.statusText,\r\n      url: error.url,\r\n      responseTime\r\n    });\r\n\r\n    const apiError: ApiError = {\r\n      message: errorMessage,\r\n      status: error.status || 0,\r\n      timestamp: new Date().toISOString(),\r\n      path: url\r\n    };\r\n\r\n    return throwError(() => apiError);\r\n  }\r\n\r\n  // Generic HTTP request method with logging\r\n  private request<T>(method: string, endpoint: string, body?: any): Observable<ApiResponse<T>> {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    const startTime = Date.now();\r\n    \r\n    this.auditLogger.logApiCall(method, url);\r\n\r\n    const httpOptions = {\r\n      headers: this.getHeaders()\r\n    };\r\n\r\n    let httpRequest: Observable<T>;\r\n\r\n    switch (method.toUpperCase()) {\r\n      case 'GET':\r\n        httpRequest = this.http.get<T>(url, httpOptions);\r\n        break;\r\n      case 'POST':\r\n        httpRequest = this.http.post<T>(url, body, httpOptions);\r\n        break;\r\n      case 'PUT':\r\n        httpRequest = this.http.put<T>(url, body, httpOptions);\r\n        break;\r\n      case 'DELETE':\r\n        httpRequest = this.http.delete<T>(url, httpOptions);\r\n        break;\r\n      default:\r\n        return throwError(() => new Error(`Unsupported HTTP method: ${method}`));\r\n    }\r\n\r\n    return httpRequest.pipe(\r\n      map((response: T) => {\r\n        const responseTime = Date.now() - startTime;\r\n        \r\n        // Log successful API call\r\n        this.auditLogger.logApiCall(method, url, 200, responseTime);\r\n        \r\n        return {\r\n          success: true,\r\n          data: response,\r\n          message: 'Request successful'\r\n        } as ApiResponse<T>;\r\n      }),\r\n      catchError((error: HttpErrorResponse) => \r\n        this.handleError(error, url, method, startTime).pipe(\r\n          map((apiError: ApiError) => ({\r\n            success: false,\r\n            error: apiError,\r\n            message: apiError.message\r\n          } as ApiResponse<T>))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  // Authentication Methods\r\n\r\n  /**\r\n   * Login user with email and password\r\n   */\r\n  login(credentials: LoginRequest): Observable<ApiResponse<AuthResponse>> {\r\n    this.auditLogger.logInfo('API', 'Login Request Started', {\r\n      email: credentials.email,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    return this.request<AuthResponse>('POST', '/auth/login', credentials).pipe(\r\n      map((response: ApiResponse<AuthResponse>) => {\r\n        if (response.success && response.data) {\r\n          // Store token and user info\r\n          this.token = response.data.token;\r\n          localStorage.setItem('auth_token', this.token);\r\n          localStorage.setItem('user_info', JSON.stringify(response.data.user));\r\n          \r\n          // Set user ID in audit logger\r\n          this.auditLogger.setUserId(response.data.user.id.toString());\r\n          \r\n          this.auditLogger.logInfo('API', 'Login Successful', {\r\n            userId: response.data.user.id,\r\n            userRole: response.data.user.role,\r\n            message: response.data.message\r\n          });\r\n        } else {\r\n          this.auditLogger.logError('API', 'Login Failed', new Error(response.message || 'Unknown error'), {\r\n            email: credentials.email\r\n          });\r\n        }\r\n        \r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Register new user\r\n   */\r\n  register(userData: RegisterRequest): Observable<ApiResponse<AuthResponse>> {\r\n    // Set default role if not provided\r\n    const requestData = {\r\n      ...userData,\r\n      role: userData.role || 'EMPLOYEE'\r\n    };\r\n\r\n    this.auditLogger.logInfo('API', 'Registration Request Started', {\r\n      email: userData.email,\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n      role: requestData.role,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    return this.request<AuthResponse>('POST', '/auth/register', requestData).pipe(\r\n      map((response: ApiResponse<AuthResponse>) => {\r\n        if (response.success && response.data) {\r\n          // Store token and user info\r\n          this.token = response.data.token;\r\n          localStorage.setItem('auth_token', this.token);\r\n          localStorage.setItem('user_info', JSON.stringify(response.data.user));\r\n          \r\n          // Set user ID in audit logger\r\n          this.auditLogger.setUserId(response.data.user.id.toString());\r\n          \r\n          this.auditLogger.logInfo('API', 'Registration Successful', {\r\n            userId: response.data.user.id,\r\n            userRole: response.data.user.role,\r\n            message: response.data.message\r\n          });\r\n        } else {\r\n          this.auditLogger.logError('API', 'Registration Failed', new Error(response.message || 'Unknown error'), {\r\n            email: userData.email\r\n          });\r\n        }\r\n        \r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  logout(): void {\r\n    this.auditLogger.logInfo('API', 'Logout Initiated', {\r\n      userId: this.getCurrentUserId(),\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    // Clear stored data\r\n    this.token = null;\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('user_info');\r\n    \r\n    // Clear audit logger session\r\n    this.auditLogger.clearSession();\r\n    \r\n    this.auditLogger.logInfo('AUTH', 'User Logged Out', {\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return !!this.token;\r\n  }\r\n\r\n  /**\r\n   * Get current user information\r\n   */\r\n  getCurrentUser(): any {\r\n    const userInfo = localStorage.getItem('user_info');\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  }\r\n\r\n  /**\r\n   * Get current user ID\r\n   */\r\n  getCurrentUserId(): string | null {\r\n    const user = this.getCurrentUser();\r\n    return user ? user.id.toString() : null;\r\n  }\r\n\r\n  /**\r\n   * Get current auth token\r\n   */\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  // Future API methods can be added here (leaves, users, etc.)\r\n\r\n  /**\r\n   * Health check endpoint\r\n   */\r\n  healthCheck(): Observable<ApiResponse<any>> {\r\n    return this.request<any>('GET', '/health');\r\n  }\r\n\r\n  /**\r\n   * Test connection to backend\r\n   */\r\n  testConnection(): Observable<boolean> {\r\n    this.auditLogger.logInfo('API', 'Testing Backend Connection', {\r\n      baseUrl: this.baseUrl,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    return this.request<any>('GET', '/auth/test').pipe(\r\n      map((response: ApiResponse<any>) => {\r\n        const isConnected = response.success;\r\n        \r\n        this.auditLogger.logInfo('API', 'Connection Test Result', {\r\n          connected: isConnected,\r\n          message: response.message\r\n        });\r\n        \r\n        return isConnected;\r\n      }),\r\n      catchError(() => {\r\n        this.auditLogger.logWarn('API', 'Backend Connection Failed', {\r\n          baseUrl: this.baseUrl\r\n        });\r\n        return throwError(() => false);\r\n      })\r\n    );\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}