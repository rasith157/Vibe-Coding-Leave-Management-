{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./audit-logger.service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, auditLogger) {\n      this.http = http;\n      this.auditLogger = auditLogger;\n      this.baseUrl = 'http://localhost:8080/api';\n      this.token = null;\n      // Load token from localStorage on service initialization\n      this.token = localStorage.getItem('auth_token');\n    }\n    // Get default headers with optional authentication\n    getHeaders() {\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      if (this.token) {\n        headers = headers.set('Authorization', `Bearer ${this.token}`);\n      }\n      return headers;\n    }\n    // Handle HTTP errors and log them\n    handleError(error, url, method, startTime) {\n      const responseTime = Date.now() - startTime;\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Client Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Server Error: ${error.status} - ${error.message}`;\n      }\n      // Log the API error\n      this.auditLogger.logApiCall(method, url, error.status, responseTime, error);\n      this.auditLogger.logError('API', `${method} ${url} Failed`, error, {\n        status: error.status,\n        statusText: error.statusText,\n        url: error.url,\n        responseTime\n      });\n      const apiError = {\n        message: errorMessage,\n        status: error.status || 0,\n        timestamp: new Date().toISOString(),\n        path: url\n      };\n      return throwError(() => apiError);\n    }\n    // Generic HTTP request method with logging\n    request(method, endpoint, body) {\n      const url = `${this.baseUrl}${endpoint}`;\n      const startTime = Date.now();\n      this.auditLogger.logApiCall(method, url);\n      const httpOptions = {\n        headers: this.getHeaders()\n      };\n      let httpRequest;\n      switch (method.toUpperCase()) {\n        case 'GET':\n          httpRequest = this.http.get(url, httpOptions);\n          break;\n        case 'POST':\n          httpRequest = this.http.post(url, body, httpOptions);\n          break;\n        case 'PUT':\n          httpRequest = this.http.put(url, body, httpOptions);\n          break;\n        case 'DELETE':\n          httpRequest = this.http.delete(url, httpOptions);\n          break;\n        default:\n          return throwError(() => new Error(`Unsupported HTTP method: ${method}`));\n      }\n      return httpRequest.pipe(map(response => {\n        const responseTime = Date.now() - startTime;\n        // Log successful API call\n        this.auditLogger.logApiCall(method, url, 200, responseTime);\n        return {\n          success: true,\n          data: response,\n          message: 'Request successful'\n        };\n      }), catchError(error => this.handleError(error, url, method, startTime).pipe(map(apiError => ({\n        success: false,\n        error: apiError,\n        message: apiError.message\n      })))));\n    }\n    // Authentication Methods\n    /**\n     * Login user with email and password\n     */\n    login(credentials) {\n      this.auditLogger.logInfo('API', 'Login Request Started', {\n        email: credentials.email,\n        timestamp: new Date().toISOString()\n      });\n      return this.request('POST', '/auth/login', credentials).pipe(map(response => {\n        if (response.success && response.data) {\n          // Store token and user info\n          this.token = response.data.token;\n          localStorage.setItem('auth_token', this.token);\n          localStorage.setItem('user_info', JSON.stringify(response.data.user));\n          // Set user ID in audit logger\n          this.auditLogger.setUserId(response.data.user.id.toString());\n          this.auditLogger.logInfo('API', 'Login Successful', {\n            userId: response.data.user.id,\n            userRole: response.data.user.role,\n            message: response.data.message\n          });\n        } else {\n          this.auditLogger.logError('API', 'Login Failed', new Error(response.message || 'Unknown error'), {\n            email: credentials.email\n          });\n        }\n        return response;\n      }));\n    }\n    /**\n     * Register new user\n     */\n    register(userData) {\n      // Set default role if not provided\n      const requestData = {\n        ...userData,\n        role: userData.role || 'EMPLOYEE'\n      };\n      this.auditLogger.logInfo('API', 'Registration Request Started', {\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: requestData.role,\n        timestamp: new Date().toISOString()\n      });\n      return this.request('POST', '/auth/register', requestData).pipe(map(response => {\n        if (response.success && response.data) {\n          // Store token and user info\n          this.token = response.data.token;\n          localStorage.setItem('auth_token', this.token);\n          localStorage.setItem('user_info', JSON.stringify(response.data.user));\n          // Set user ID in audit logger\n          this.auditLogger.setUserId(response.data.user.id.toString());\n          this.auditLogger.logInfo('API', 'Registration Successful', {\n            userId: response.data.user.id,\n            userRole: response.data.user.role,\n            message: response.data.message\n          });\n        } else {\n          this.auditLogger.logError('API', 'Registration Failed', new Error(response.message || 'Unknown error'), {\n            email: userData.email\n          });\n        }\n        return response;\n      }));\n    }\n    /**\n     * Logout user\n     */\n    logout() {\n      this.auditLogger.logInfo('API', 'Logout Initiated', {\n        userId: this.getCurrentUserId(),\n        timestamp: new Date().toISOString()\n      });\n      // Clear stored data\n      this.token = null;\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('user_info');\n      // Clear audit logger session\n      this.auditLogger.clearSession();\n      this.auditLogger.logInfo('AUTH', 'User Logged Out', {\n        timestamp: new Date().toISOString()\n      });\n    }\n    /**\n     * Check if user is authenticated\n     */\n    isAuthenticated() {\n      return !!this.token;\n    }\n    /**\n     * Get current user information\n     */\n    getCurrentUser() {\n      const userInfo = localStorage.getItem('user_info');\n      return userInfo ? JSON.parse(userInfo) : null;\n    }\n    /**\n     * Get current user ID\n     */\n    getCurrentUserId() {\n      const user = this.getCurrentUser();\n      return user ? user.id.toString() : null;\n    }\n    /**\n     * Get current auth token\n     */\n    getToken() {\n      return this.token;\n    }\n    // Future API methods can be added here (leaves, users, etc.)\n    /**\n     * Health check endpoint\n     */\n    healthCheck() {\n      return this.request('GET', '/health');\n    }\n    /**\n     * Test connection to backend\n     */\n    testConnection() {\n      this.auditLogger.logInfo('API', 'Testing Backend Connection', {\n        baseUrl: this.baseUrl,\n        timestamp: new Date().toISOString()\n      });\n      return this.request('GET', '/auth/test').pipe(map(response => {\n        const isConnected = response.success;\n        this.auditLogger.logInfo('API', 'Connection Test Result', {\n          connected: isConnected,\n          message: response.message\n        });\n        return isConnected;\n      }), catchError(() => {\n        this.auditLogger.logWarn('API', 'Backend Connection Failed', {\n          baseUrl: this.baseUrl\n        });\n        return throwError(() => false);\n      }));\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuditLoggerService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}