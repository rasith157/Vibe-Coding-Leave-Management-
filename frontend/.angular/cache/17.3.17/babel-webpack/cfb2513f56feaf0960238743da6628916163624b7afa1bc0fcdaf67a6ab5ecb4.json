{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/audit-logger.service\";\nexport class AuthGuard {\n  constructor(apiService, router, auditLogger) {\n    this.apiService = apiService;\n    this.router = router;\n    this.auditLogger = auditLogger;\n  }\n  canActivate(route, state) {\n    const isAuthenticated = this.apiService.isAuthenticated();\n    const currentUser = this.apiService.getCurrentUser();\n    const requestedUrl = state.url;\n    this.auditLogger.logInfo('NAVIGATION', 'Route Access Attempt', {\n      requestedUrl,\n      isAuthenticated,\n      userRole: currentUser?.role || 'anonymous',\n      timestamp: new Date().toISOString()\n    });\n    if (!isAuthenticated) {\n      this.auditLogger.logWarn('AUTH', 'Unauthorized Access Attempt', {\n        requestedUrl,\n        redirectTo: '/login'\n      });\n      // Redirect to login page with return url\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: requestedUrl\n        }\n      });\n      return false;\n    }\n    // Check role-based access for admin routes\n    if (requestedUrl.startsWith('/admin')) {\n      if (currentUser?.role !== 'ADMIN') {\n        this.auditLogger.logWarn('AUTH', 'Admin Access Denied', {\n          requestedUrl,\n          userRole: currentUser?.role,\n          userId: currentUser?.id,\n          redirectTo: '/dashboard'\n        });\n        // Redirect non-admin users to dashboard\n        this.router.navigate(['/dashboard']);\n        return false;\n      }\n    }\n    this.auditLogger.logInfo('NAVIGATION', 'Route Access Granted', {\n      requestedUrl,\n      userRole: currentUser?.role,\n      userId: currentUser?.id\n    });\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuditLoggerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","apiService","router","auditLogger","canActivate","route","state","isAuthenticated","currentUser","getCurrentUser","requestedUrl","url","logInfo","userRole","role","timestamp","Date","toISOString","logWarn","redirectTo","navigate","queryParams","returnUrl","startsWith","userId","id","i0","ɵɵinject","i1","ApiService","i2","Router","i3","AuditLoggerService","factory","ɵfac","providedIn"],"sources":["C:\\Leave management 2\\frontend\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { ApiService } from '../services/api.service';\r\nimport { AuditLoggerService } from '../services/audit-logger.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private apiService: ApiService,\r\n    private router: Router,\r\n    private auditLogger: AuditLoggerService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const isAuthenticated = this.apiService.isAuthenticated();\r\n    const currentUser = this.apiService.getCurrentUser();\r\n    const requestedUrl = state.url;\r\n\r\n    this.auditLogger.logInfo('NAVIGATION', 'Route Access Attempt', {\r\n      requestedUrl,\r\n      isAuthenticated,\r\n      userRole: currentUser?.role || 'anonymous',\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    if (!isAuthenticated) {\r\n      this.auditLogger.logWarn('AUTH', 'Unauthorized Access Attempt', {\r\n        requestedUrl,\r\n        redirectTo: '/login'\r\n      });\r\n\r\n      // Redirect to login page with return url\r\n      this.router.navigate(['/login'], { \r\n        queryParams: { returnUrl: requestedUrl } \r\n      });\r\n      return false;\r\n    }\r\n\r\n    // Check role-based access for admin routes\r\n    if (requestedUrl.startsWith('/admin')) {\r\n      if (currentUser?.role !== 'ADMIN') {\r\n        this.auditLogger.logWarn('AUTH', 'Admin Access Denied', {\r\n          requestedUrl,\r\n          userRole: currentUser?.role,\r\n          userId: currentUser?.id,\r\n          redirectTo: '/dashboard'\r\n        });\r\n\r\n        // Redirect non-admin users to dashboard\r\n        this.router.navigate(['/dashboard']);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    this.auditLogger.logInfo('NAVIGATION', 'Route Access Granted', {\r\n      requestedUrl,\r\n      userRole: currentUser?.role,\r\n      userId: currentUser?.id\r\n    });\r\n\r\n    return true;\r\n  }\r\n} "],"mappings":";;;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,UAAsB,EACtBC,MAAc,EACdC,WAA+B;IAF/B,KAAAF,UAAU,GAAVA,UAAU;IACV,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEHC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,eAAe,GAAG,IAAI,CAACN,UAAU,CAACM,eAAe,EAAE;IACzD,MAAMC,WAAW,GAAG,IAAI,CAACP,UAAU,CAACQ,cAAc,EAAE;IACpD,MAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAG;IAE9B,IAAI,CAACR,WAAW,CAACS,OAAO,CAAC,YAAY,EAAE,sBAAsB,EAAE;MAC7DF,YAAY;MACZH,eAAe;MACfM,QAAQ,EAAEL,WAAW,EAAEM,IAAI,IAAI,WAAW;MAC1CC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;KAClC,CAAC;IAEF,IAAI,CAACV,eAAe,EAAE;MACpB,IAAI,CAACJ,WAAW,CAACe,OAAO,CAAC,MAAM,EAAE,6BAA6B,EAAE;QAC9DR,YAAY;QACZS,UAAU,EAAE;OACb,CAAC;MAEF;MACA,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC/BC,WAAW,EAAE;UAAEC,SAAS,EAAEZ;QAAY;OACvC,CAAC;MACF,OAAO,KAAK;;IAGd;IACA,IAAIA,YAAY,CAACa,UAAU,CAAC,QAAQ,CAAC,EAAE;MACrC,IAAIf,WAAW,EAAEM,IAAI,KAAK,OAAO,EAAE;QACjC,IAAI,CAACX,WAAW,CAACe,OAAO,CAAC,MAAM,EAAE,qBAAqB,EAAE;UACtDR,YAAY;UACZG,QAAQ,EAAEL,WAAW,EAAEM,IAAI;UAC3BU,MAAM,EAAEhB,WAAW,EAAEiB,EAAE;UACvBN,UAAU,EAAE;SACb,CAAC;QAEF;QACA,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpC,OAAO,KAAK;;;IAIhB,IAAI,CAACjB,WAAW,CAACS,OAAO,CAAC,YAAY,EAAE,sBAAsB,EAAE;MAC7DF,YAAY;MACZG,QAAQ,EAAEL,WAAW,EAAEM,IAAI;MAC3BU,MAAM,EAAEhB,WAAW,EAAEiB;KACtB,CAAC;IAEF,OAAO,IAAI;EACb;;;uBAxDW1B,SAAS,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,kBAAA;IAAA;EAAA;;;aAATlC,SAAS;MAAAmC,OAAA,EAATnC,SAAS,CAAAoC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}